generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id         String        @id @default(uuid(7))
  email      String?
  phone      String?
  username   String        @unique
  nickname   String?       @unique
  password   String
  avatar_url String?
  role       String        @default("user")
  oauth      OAuth[]
  tokens     AccessToken[]

  @@map("imgx_user")
}

// 第三方登录
model OAuth {
  id                   String   @id @default(uuid(7))
  userId               String // 关联到主用户表
  provider             String // 'github', 'google', 'wechat' 等
  providerId           String // 第三方平台的用户ID
  providerUnionId      String // 第三方生态中跨应用用户唯一id
  providerToken        String? // 第三方平台的用户token
  providerRefreshToken String? // 第三方平台的用户refresh token
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("imgx_oauth")
}

model AccessToken {
  id        String   @id @default(uuid(7))
  userId    String // 关联到主用户表
  userInfo  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  roles     String // user,template,preset,all
  isRevoked Boolean  @default(false)
  ip        String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("imgx_access_token")
}

// 预设。包含了使用了哪个模板，以及会给模板传递哪些参数。渲染时，取出 styleProps 和 contentProps 合并后传给 template，然后渲染。
model Preset {
  id           String   @id @default(uuid(7))
  code         String   @unique
  templateId   String // 模版ID 目前只有一个模板
  templateInfo Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId       String // 关联到主用户表
  name         String
  description  String?
  styleProps   Json // 预设包含了一组固定样式
  contentProps Json // 和一组动态内容
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("imgx_preset")
}

model Template {
  id          String   @id @default(uuid(7))
  name        String
  template    String   @db.Text
  props       Json // 存储默认的 props 配置
  propsSchema Json // 属性的描述和验证规则 Preset 要利用这个 schema 生成样式表单 创建 template 时要明确哪些是样式配置，哪些是动态内容
  type        String   @default("base") // 模板类型，如 base, advanced 等
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String // 关联到主用户表
  presets     Preset[]

  @@map("imgx_template")
}
